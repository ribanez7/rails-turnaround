# coding: utf-8
assert
assert_equal
NoMethodError
asignación en paralelo: ejemplo: si hay 3 y pongo dos, solo coge los dos 
primeros a no ser que el último vaya precedido por * (
    first_name, last_name = ["John", "Smith", "III"]
    first_name, *last_name = ["John", "Smith", "III"]
)
    si hay varios elementos en array, pero solo una variable, aunque con coma, 
    entonces solo cogerá el primero.

Arrays:
=======
push pop
unshift shift

Hashes:
=======
si usamos el método fetch para obtener un valor, en caso de q no exista la key,
 se hará raise del error KeyError.
Esto es muy útil.
si no usamos fetch sencillamente obtendríamos nil.

Están desordenados.

con merge, los datos repetidos se actualizan por los proporcionados/nuevos.

inicializando un hash con .new(un_valor), si pedimos el valor de una clave no 
existente, devolverá ese por defecto.
Por ello, inicializándolo con Hash.new([]), directamente transforma el Hash en 
Array (no es cierto, pero sí, porque devuelve siempre el mismo array)
Y Hash.new {|hash, key| hash[key] = [] }, transformará cada value en un array
 distinto.

Strings:
========
  def test_the_shovel_operator_modifies_the_original_string
    original_string = "Hello, "
    hi = original_string
    there = "World"
    hi << there
    assert_equal "Hello, World", original_string

    # THINK ABOUT IT:
    #
    # Ruby programmers tend to favor the shovel operator (<<) over the
    # plus equals operator (+=) when building up strings.  Why?
  end

  split takes patterns, so regex, so between slashes: string.split(/:/)
        and if no argument, then the IFS: the space.



substrings:
===========
usando el formato [num,num] es el clásico substring.
usando rangos [8..9] es del 8 al 2.

symbols:
========
  los métodos se almacenan también como símbolos.

regex:
======
\A es principio de string (una string puede tener \n...)
\z es final de string
^ es principio de línea (puede haber varios en un string)
$ es final de línea

def test_scan_is_like_find_all
assert_equal ["one", "two", "three"], "one two-three".scan(/\w+/)
end

def test_sub_is_like_find_and_replace
assert_equal "one t-three", "one two-three".sub(/(t\w*)/) { $1[0, 1] }
end

def test_gsub_is_like_find_and_replace_all
assert_equal "one t-t", "one two-three".gsub(/(t\w*)/) { $1[0, 1] }
end

Methods:
========
  exact arguments
  default values
  *arguments (Array)

Constants:
==========
  nested classes inherit constants from enclosing classes.
  Reference them using the full path. ¿Mandatory?
  
  subclasses inherit constants from parent classes.
  Reference them with relative path.

who wins with both nested and inherited constants

  class MyAnimals
    LEGS = 2

    class Bird < Animal
      def legs_in_bird
        LEGS
      end
    end
  end

  def test_who_wins_with_both_nested_and_inherited_constants
    assert_equal 2, MyAnimals::Bird.new.legs_in_bird
  end

  # QUESTION: Which has precedence: The constant in the lexical scope,
  # or the constant from the inheritance hierarchy?

  # ------------------------------------------------------------------

  class MyAnimals::Oyster < Animal
    def legs_in_oyster
      LEGS
    end
  end

  def test_who_wins_with_explicit_scoping_on_class_definition
    assert_equal 4, MyAnimals::Oyster.new.legs_in_oyster
  end

  # QUESTION: Now which has precedence: The constant in the lexical
  # scope, or the constant from the inheritance hierarchy?  Why is it
  # different than the previous answer?

Exceptions:
===========
  RuntimeError.ancestors.inspect
  => "[RuntimeError, StandardError, Exception, Object, Kernel, BasicObject]"

begin
rescue
ensure
raise
catch
throw

# Using begin and rescue statements is error handling in Ruby. The same
# as try/catch in other languages. You can have multiple rescue statements
# to handle different exceptions.
def test_rescue_clause
  result = nil
  begin
    fail "Oops"
  rescue StandardError => ex
    result = :exception_handled
  end

  assert_equal :exception_handled, result

  assert_equal true, ex.is_a?(StandardError), "Should be a Standard Error"
  assert_equal true, ex.is_a?(RuntimeError),  "Should be a Runtime Error"

  assert RuntimeError.ancestors.include?(StandardError),
         "RuntimeError is a subclass of StandardError"

  assert_equal "Oops", ex.message
end

def test_raising_a_particular_error
  result = nil
  begin
    # 'raise' and 'fail' are synonyms
    raise MySpecialError, "My Message"
  rescue MySpecialError => ex
    result = :exception_handled
  end

  assert_equal :exception_handled, result
  assert_equal "My Message", ex.message
end

# Using begin, rescue, and finally statements is error handling in Ruby.
# The same as try/catch/finally in other languages. You can have multiple
# rescue statements to handle different exceptions. An ensure statement is
# just like a finally statement. It will always run after all rescue
# statements have.
def test_ensure_clause
  result = nil
  begin
    fail "Oops"
  rescue StandardError => ex
  # no code here
  ensure
    result = :always_run
  end

  assert_equal :always_run, result
end

# Sometimes, we must know about the unknown
def test_asserting_an_error_is_raised
  # A do-end is a block, a topic to explore more later
  assert_raise(MySpecialError) do
    raise MySpecialError.new("New instances can be raised directly.")
  end
end

end


iterators:
==========
each, accepts a block, iterates over each element of an array. can be break.
collect or map, accept a block, transform elements of an array.
select or find_all, accept a block, selects certain items of an array.
find locates the first element matching a criteria.

while, for, until, break, next, redo and retry

break will stop looping after achieving the condition (but does execute the 
full current one).


classes:
========
el método .instance_variables devuelve un ARRAY con el nombre de las variables
 como símbolos. se puede acceder a una variable de instancia via 
.instance_variable_get("@name")
pero también se puede, de manera más invasiva, mediante:
.instance_eval("@name")
.instance_eval { @name }

Pero, la manera mediante la cual se accede a variables de instancia es la 
siguiente:
se crean métodos accessor que devuelven su valor de manera tradicional:
instancia.name

class Dog3
  def set_name(a_name)
    @name = a_name
  end
  def name
    @name
  end
end

Pero, la forma correcta, es declarando esa variable, como símbolo, como 
attr_reader
  class Dog4
    attr_reader :name

    def set_name(a_name)
      @name = a_name
    end
  end

Por otro lado, si necesitamos tanto set como get de la variable de instancia, 
lo haremos mediante el uso de attr_accessor :name
Esto nos permitirá hacer set de la variable desde fuera, y acceder a ella 
también:
class Dog5
  attr_accessor :name
end

Y, para crear una instancia con ciertos valores, directamente, tenemos el 
método initialize, donde asignamos parámetros a variables de instancia:
class Dog6
  attr_reader :name
  def initialize(initial_name)
    @name = initial_name
  end
end
Así, los argumentos asociados a .new() tienen que coincidir con los de 
initialize. ( is no, ArgumentError)

self, dentro de un método, hace referencia al objeto que lo contiene, así que 
devolverá el mismo valor que inspect.

to_s se usa para proveer una versión literal del objeto. Puede ser modificado, 
como todo, por ejemplo: def to_s
           @name
         end

Es útil, a veces, modificarlo, porque cuando se usa el objeto directamente, en 
interpolación en una string, se irá a buscar el valor de retorno de to_s

Todos los objetos soportan to_s e inspect.

Las clases pueden reabrirse, incluso las builtin, y ser modificadas.

class DiceSet
  attr_reader :values
  def roll(t)
    @values = []
    1.upto(t) do |i|
      @values << Random.new.rand(1..6)
    end
  end
end

INHERITANCE:
============
subclasses are declared as:
class CamelCase < Dog
end

the parent is known by the class as an ancestor.
CamelCase.ancestors.include?(Dog)
all the classes have the following as true:
CamelCase.ancestors.include?(Object)
Subclasses also inherit behavior and, of course, add new behavior and modify 
exiting one.

Subclasses can invoke parent behavior via super, like
class BullDog < Dog
  def bark
    super + ", GROWL"
  end
end
IMPORTANT: super doesn't work cross method.

MODULES:
========
Los módulos no pueden instanciarse.
Se incluyen en la clase.
Los métodos de módulo pueden afectar a las variables de instancia en el objeto.
Los métodos de clase pueden sobrescribir métudos de módulo.

SCOPE:
======
Se pueden referenciar clases anidadas utilizando el scope_operator.
Jims::Dog.new
Joes::Dog.new

Si creamos un método, por ejemplo, llamado String, dentro de esa clase siempre 
haremos referencia al nuevo. Por ese motivo, si queremos referenciar al método 
global, podemos usar el operador de alcance ::
  def test_nested_string_is_not_the_same_as_the_system_string
    assert_equal false, String == "HI".class
  end

  def test_use_the_prefix_scope_operator_to_force_the_global_scope
    assert_equal true, ::String == "HI".class
  end

Las constantes se definen con una letra inicial en mayúsculas.

Los nombres de las clases son también constantes.

Pueden buscarse con los métodos:
CamelCase.constants
CamelCase.const_get("PI")

Class Methods:
==============
se pueden definir métodos en objetos individuales, sencillamente haciendo, 
fuera de la clase, en el objeto: def objeto.nuevo_method ... end
Los otros objetos (instancias de la misma clase) no se verán afectados por el 
nuevo método singleton.

Como las clases son también objetos, pueden definirse métodos singleton en 
ellas directamente.
Serían métodos a nivel de clase, no de instancia.
Clases e instancias, obviamente, no comparten variables de instancia.

Así como podemos definir métodos de clase desde fuera de la clase, también 
podemos definirlo desde dentro, sencillamente anteponiendo el CamelCase al 
nombre del método:
class Dog
  def Dog.a_class_method
  end
end

Los estamentos de clase devuelven el valor de su última expresión.

Self, en una clase, es un objeto de clase, no una instancia.
Por ello, para crear métodos de clase, podemos usar self.nuevo_method, en vez 
del CamelCase.

Una tercera manera de definir métodos de clase es la siguiente:
  class Dog
    class << self
      def another_class_method
        :still_another_way
      end
    end
  end
Definiendo una subclase anónima que hereda de self, y dentro de ella, 
definiendo los métodos de clase diréctamente, sin la necesidad de especificar 
de donde provienen.
Siguiendo esa misma lógica, podemos llamar a métodos de clase desde una 
instancia usando el método class (porque nos subirá un nivel): 
instancia.class.class_method

MESSAGE PASSING:
================
se pueden llamar a los métodos diréctamente, pero también podemos invocarlos de
manera dinámica, mediante el método .send o .__send__
-por ejemplo-
instancia.send("nom" + "bre_del_" + num + "method")
instancia.send(:método)

Disponemos también del método respond_to?(:method_name) para saber si sabrían 
responder a nuestra pregunta.


PROXY OBJECT
============
class Proxy
  attr_reader :messages

  def initialize(target_object)
    @object = target_object
    # ADD MORE CODE HERE
    @messages = []
  end

  # WRITE CODE HERE
  def method_missing(method_name, *args, &bk)
    @messages << method_name
    @object.__send__(method_name, *args, &bk)
  end

  def called?(method)
    @messages.include? method
  end

  def number_of_times_called(method)
    count = @messages.count method
  end
end





========
SINATRA:
========
def get(path, opts = {}, &block)
  conditions = @conditions.dup
  route('GET', path, opts, &block)

  @conditions = conditions
  route('HEAD', path, opts, &block)
end

def put(path, opts = {}, &bk)     route 'PUT',     path, opts, &bk end
def post(path, opts = {}, &bk)    route 'POST',    path, opts, &bk end
def delete(path, opts = {}, &bk)  route 'DELETE',  path, opts, &bk end
def head(path, opts = {}, &bk)    route 'HEAD',    path, opts, &bk end
def options(path, opts = {}, &bk) route 'OPTIONS', path, opts, &bk end
def patch(path, opts = {}, &bk)   route 'PATCH',   path, opts, &bk end
def link(path, opts = {}, &bk)    route 'LINK',    path, opts, &bk end
def unlink(path, opts = {}, &bk)  route 'UNLINK',  path, opts, &bk end

# get, post, put, delete, head, options, patch, link, unlink
# No olvidemos que, como seguro que más de una vez querremos usar la misma ruta
desde diferentes métodos, pueden construirse handlers del tipo:
['/one', '/two', '/three'].each do |route|
  get route do
    "GET"
  end
  post route do
    "POST"
  end
  put route do
    "PUT"
  end
  delete route do
    "DELETE"
  end
  head route do
    "HEAD"
  end
  options route do
    "OPTIONS"
  end
  patch route do
    "PATCH"
  end
  link route do
    "LINK"
  end
  unlink route do
    "UNLINK"
  end
end



APPART:
===============================================================================
TEXT PROCESSING WITH RUBY:
===============================================================================
ARGF:

gather info with:
.each     => se refiere a cada línea
.filename => self-explanatory
.file     => devuelve un objeto file para el fichero que se esté tratando en 
             ese momento
.lineno   => line num of all the data stream starting from 1
.file.lineno => the same but file by file.

other tasks:
.skyp     => skips that file, go to next. 
             (for example, unless ARGF.filename.end_with? ".txt")

(((ruby accepts de command line option -i, to do in-place actions, and also its
backup mode with -i'.bak')))

ARGV:

use it for very little scripts.
For other than modifiers (like -v), it has no sense to use it, but the 
OptionParser internal library.


TSV:
===============================================================================

gets, readline, each_line, and so on work with the $/ variable 
(the input record separator).
$/ = "\n"

There's the input record separator too: $; (by default blank-space).

```
$/ = "\n"
$; = "\t"

File.open(data/file.tsv) do |file|
  file.each do |record|
    record.chomp.split do |field|
      ...
    end
  end
end

```
```
File.open("data/shopping.tsv") do |file|
  cheese_total = file.each_line
    .map         { |line| line.chomp.split("\t") }
    .select      { |_, _, shop| shop == "Cheese Shop" }
    .map         { |_, price, _| price }
    .reduce(0.0) { |total, price| total + price[1..-1].to_f }
    .round(2)

  puts "£#{cheese_total}"
end
```

CSV:
===============================================================================
The internal ruby library is more than enough.


OTHER THINGS ABUT CLI RUBY
===============================================================================
-F => refers to $;
-0(nums) => refers to $/
  examples:
    -015 is "\r"
    -00 are paragraphs
    -0777 is the whole text as a unit.
-l => adds the EOL
-r[library] => requires a library




HTML:
===============================================================================
nokogiri and open-uri.


XPath and CSS selectors:
TAGS:
  xpath: 
    - //article//p/img
  css:
    - article p > img


ATTRS:
  xpath: 
    - //div[@class="container"]
    - //div[starts-with(@class, "container")]
    - //div[starts-with(@class, "con")]
    - //div[starts-with(@class, "c")]
    - //div[contains(@class, "container")]
    - //div[contains(@class, "ontainer")]
    - //div[contains(@class, "ntai")]
  css:
    - img[src]
    - div[class="container"]
    - div[class^="container"]
    - div[class^="con"]
    - div[class^="c"]
    - div[class*="container"]
    - div[class*="ontainer"]
    - div[class*="ntai"]
    - div[class$="ainer"]
    - div[class~="container"]
    - div.container
    - div#main


MULTIPLE:
  xpath:
    - //p/img | //li/img
  css:
    - p > img, li > img


doc.xpath(​"//p//img"​)
doc.css(​"p img"​)
doc.xpath(​"//p"​).css(​"img"​)

search, /, xpath and css
  all search for every occurrence of the accessor and return a NodeSet.
at, %, at_xpath and at_css
  search for the first occurrence and return a Node.

Extracting Information from Elements
===============================================================================
its own text contents, the contents of an attribute, and the name of the 
element

Reading an element's text:
.text method:

doc = Nokogiri::HTML(<<-DOC)
​<html>​
​<body>​
​  <h2>This is a heading</h2>​
​  <p>This is a paragraph</p>​
  <h2>This is also a heading</h2>​
​  <p>This is also a paragraph</p>​
​</body>​
​</html>​
​DOC​

doc.css('h2').each do |heading|
  heading.text
end


doc.at_css(​"body"​).text
  would return all the content inside body, also from descendant tags.

doc.at_css(​"body text()"​).text
  (in XPath would be  body/text() )
  would return just the content inside body, and not the content from its 
  descendants.



Reading an Element’s Attributes
===============================================================================
.attr
Doing:
  doc.css(​"img"​).each ​do​ |image|
    puts image.attr(​"src"​)
  ​end​

Is the same than shortcutting it to []:
  doc.css(​"img"​).each ​do​ |image|
    puts image[​"src"​]
  ​end​


Reading an Element’s Name
===============================================================================
This action is useful when you are under an element with many children and you
need different login for a given kind of element.
  doc.css(​"img"​).each ​do​ |image|
    image.name
    ​# => "img"​
  ​end​


Navigating from Nodes
===============================================================================
```
list = doc.at_css("ul")

list_item = list.children.first
list_item.name                    # => "li"

list_item.parent.name             # => "ul"
```

or:

```
first_li = doc.at_css("li")

second_li = first_li.next_sibling
second_li.text
# => "List item two"

first_li = second_li.previous_sibling
first_li.text
# => "List item one"
```



or:
```
Image = Struct.new(:file, :caption)

doc.css("img").each do |img|
  file = img["src"]

  caption = if img.next_sibling.name == "figcaption"
              img.next_sibling.text
            else
              "No caption"
            end

  Image.new(file, caption)
```



















